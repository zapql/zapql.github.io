{"version":3,"sources":["store/Apollo/index.js","components/ChatList/style.js","components/ChatList/index.jsx","components/ChatRoom/ChatRoomHeader/style.js","components/ChatRoom/ChatRoomHeader/index.jsx","components/ChatRoom/MessageList/style.js","components/ChatRoom/MessageList/index.jsx","components/ChatRoom/MessageInput/SendIconStyle.js","components/ChatRoom/MessageInput/SendIcon.jsx","components/ChatRoom/MessageInput/style.js","components/ChatRoom/MessageInput/index.jsx","components/ChatRoom/style.js","store/Apollo/ChatRoom/index.js","components/ChatRoom/index.jsx","components/DashboardRoom/style.js","components/DashboardRoom/index.jsx","pages/Dashboard/style.js","pages/Dashboard/index.jsx","store/datazero.js","App.js","reportWebVitals.js","index.js"],"names":["AUTH_TOKEN","authLink","setContext","_","headers","authorization","httpLink","HttpLink","uri","wsLink","WebSocketLink","options","reconnect","splitLink","split","query","definition","getMainDefinition","kind","operation","concat","client","ApolloClient","link","cache","InMemoryCache","Container","styled","div","DivToolbar","ChatPicture","img","ChatInfo","ChatName","MessageContent","MessageDate","ChatList","chatListData","contacts","chats","data-testid","Divider","List","map","contact","ListItem","button","component","Link","to","id","src","info","avatar","alt","name","messages","Fragment","msg","moment","unix","timestamp","format","Navbar","AppBar","Toolbar","Picture","Name","ChatRoomHeader","chatHeaderData","position","MessageItem","props","isMine","css","Contents","isError","Timestamp","MessageList","messageListData","chatId","useEffect","document","getElementById","scrollTop","scrollHeight","message","from","wid","PaperPlane","span","SendIcon","data-icon","ActualInput","input","SendButton","Button","MessageInput","onMessage","inputState","setInputState","focus","sendInput","variables","type","placeholder","value","onKeyPress","e","charCode","onChange","target","onClick","SEND_TEXT_MESSAGE_MUTATION","gql","disableMessageInput","bool","disabled","handleError","error","dispatch","Error","networkError","graphQLErrors","throwedError","console","table","previousState","Math","random","Date","now","ChatRoom","chatRoomData","useState","hasOwnProperty","useMutation","onError","sendMessageMutation","loading","returnData","data","typeKey","Object","keys","MainContainer","MainContainerIcon","FirstText","h1","SecondText","DashboardRoom","Row","Side","Main","Dashboard","state","useParams","contactList","entries","messageList","chatData","item","i","assign","chatDataById","find","chat","datazero","prop1","554498455712","status","556599375661","App","path","exact","render","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.dee0c9ae.chunk.js","sourcesContent":["import { ApolloClient, InMemoryCache } from '@apollo/client'\nimport { split, HttpLink } from '@apollo/client'\nimport { WebSocketLink } from '@apollo/client/link/ws'\nimport { getMainDefinition } from '@apollo/client/utilities'\nimport { setContext } from '@apollo/client/link/context';\n\n// Code:\nconst AUTH_TOKEN = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzaGFyZCI6IjU1NjU5NjkxMDI5NSIsImlhdCI6MTYxNDA5NjI3Nn0.fNgOsRfM0y0-lQOZmhqn3NA7h3lR9EcOWyIiSqdTxBI\"\n\n/**\n * Permite recuperar o header e incluir autenticacao.\n * Deve ser concatenado com httpLink e ou wsLink.\n */\nconst authLink = setContext((_, { headers }) => {\n  return {\n    headers: {\n      ...headers,\n      authorization: AUTH_TOKEN ? `Bearer ${AUTH_TOKEN}` : \"\",\n    }\n  }\n});\n\nconst httpLink = new HttpLink({\n  uri: 'http://zapql.com:4000'\n})\n\nconst wsLink = new WebSocketLink({\n  uri: 'ws://zapql.com:4000/graphql',\n  options: {\n    reconnect: true\n  }\n})\n\n/**\n * A funcao split faz com que o client diferencie o tipo de requisicao.\n * Se for query e mutation, usa o httpLink;\n * Se for subscription usa o wsLink.\n */\nconst splitLink = split(\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  authLink.concat(httpLink), // so esta passando header aqui por enquanto\n)\n\nexport const client = new ApolloClient({\n  link: splitLink,\n  cache: new InMemoryCache()\n})\n","import styled from \"styled-components\";\n\n// TODO: Detectar resize da janela, e ocultar \"Side\" (ChatList)\nexport const Container = styled.div`\n  @media (max-width: 30em) {\n    #Side {\n      visibility: collapse;\n    }\n  }\n`\n\n// esse theme.mixins.toolbar cria o recuo vazio na parte de cima\nexport const DivToolbar = styled.div`\n    min-height: 10vh;\n`\n\nexport const ChatPicture = styled.img`\n  height: 50px;\n  width: 50px;\n  object-fit: cover;\n  border-radius: 50%;\n`;\n\nexport const ChatInfo = styled.div`\n  width: calc(100% - 60px);\n  height: 46px;\n  padding: 15px 0;\n  margin-left: 10px;\n  border-bottom: 0.5px solid silver;\n  position: relative;\n`;\n\nexport const ChatName = styled.div`\n  margin-top: 5px;\n`;\n\nexport const MessageContent = styled.div`\n  color: gray;\n  font-size: 15px;\n  margin-top: 5px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nexport const MessageDate = styled.div`\n  position: absolute;\n  color: gray;\n  top: 20px;\n  right: 0;\n  font-size: 13px;\n`;","import React from 'react'\nimport moment from 'moment'\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem'\nimport Divider from '@material-ui/core/Divider';\nimport { DivToolbar, ChatPicture, ChatInfo, ChatName, MessageContent, MessageDate, Container } from './style'\nimport { Link } from 'react-router-dom';\n\nconst ChatList = ({ chatListData = {contacts: {}, chats: {}} }) => {\n\n    return(\n        <Container data-testid=\"ChatDiv\">\n                <DivToolbar />\n                <Divider />\n                <List>\n                    {chatListData.map((contact) => (\n                    <ListItem\n                        key={contact.id}\n                        data-testid=\"chat\"\n                        button\n                        component={Link}\n                        to={`/chats/${contact.id}`}\n                        >\n                        <ChatPicture\n                        data-testid=\"picture\"\n                        src={contact.info.avatar}\n                        alt=\"Profile\"\n                        />\n                        <ChatInfo>\n                        <ChatName data-testid=\"name\">{contact.info.name}</ChatName>\n                        {contact.messages && (\n                            <React.Fragment>\n                            <MessageContent data-testid=\"content\">\n                                {contact.messages[0].msg}\n                            </MessageContent>\n                            <MessageDate data-testid=\"date\">\n                                {moment.unix(contact.messages[0].timestamp).format('HH:mm')}\n                            </MessageDate>\n                            </React.Fragment>\n                        )}\n                        </ChatInfo>\n                    </ListItem>\n                    ))}\n                </List>\n            </Container>\n    )\n}\n\nexport default ChatList","import AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\n\nimport styled from \"styled-components\";\n\n// background-color nao aplica no storybook\nexport const Navbar = styled(AppBar)`\n    background-color: var(--primary-bg);\n    color: var(--primary-text);\n    font-size: 20px;\n    line-height: 40px;\n    position: relative;\n`;\n\nexport const Container = styled(Toolbar)`\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  background-color: var(--primary-bg);\n  color: var(--primary-text);\n`;\n\nexport const Picture = styled.img`\n  height: 40px;\n  width: 40px;\n  margin-top: 3px;\n  margin-left: -1vh;\n  object-fit: cover;\n  padding: 5px;\n  border-radius: 50%;\n`;\n\nexport const Name = styled.div`\n  line-height: 56px;\n  margin-left: 1vh;\n`;","import React from 'react';\nimport { Navbar, Container, Picture, Name } from './style'\n\nconst ChatRoomHeader = ({ chatHeaderData }) => {\n    return (\n        <div data-testid=\"chat-header-outer-div\">\n            <Navbar data-testid=\"chat-header-navbar\" position=\"relative\">\n                <Container data-testid=\"chat-header-container\">\n                    <Picture data-testid=\"chat-picture\" src={chatHeaderData.avatar}></Picture>\n                    <Name data-testid=\"chat-name\">{chatHeaderData.name}</Name>\n                </Container>\n            </Navbar>\n        </div>\n    )\n}\n\nexport default ChatRoomHeader","import styled, { css } from 'styled-components';\n\nexport const Container = styled.div`\n  display: block;\n  flex: 2;\n  overflow-x: hidden;\n  overflow-y: auto;\n  padding: 0 14vh;\n\n  scrollbar-color: rgba(0,0,0,.2) hsla(0,0%,100%,.1);\n  scrollbar-width: thin;\n}\n`;\n\nexport const MessageItem = styled.div`\ndisplay: inline-block;\nposition: relative;\nmax-width: 100%;\nborder-radius: 7px;\nbox-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\nmargin-top: 10px;\nmargin-bottom: 10px;\nclear: both;\n\n&::after {\n  content: '';\n  display: table;\n  clear: both;\n}\n\n&::before {\n  content: '';\n  position: absolute;\n  bottom: 3px;\n  width: 12px;\n  height: 19px;\n  background-position: 50% 50%;\n  background-repeat: no-repeat;\n  background-size: contain;\n}\n\n${(props) =>\n  props.isMine\n    ? css`\n        float: right;\n        background-color: #dcf8c6;\n\n        &::before {\n          right: -11px;\n          background-image: url(/assets/message-mine.png);\n        }\n      `\n    : css`\n        float: left;\n        background-color: #fff;\n\n        &::before {\n          left: -11px;\n          background-image: url(/assets/message-other.png);\n        }\n      `}\n`;\n\nexport const Contents = styled.div`\n  padding: 5px 7px;\n  word-wrap: break-word;\n  max-width: 80vh;\n\n  &::after {\n    content: ' \\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0';\n    display: inline;\n  }\n\n  ${(props) =>\n    props.isError\n    ? css`\n        font-style: italic;\n        color: gray;    \n    `\n    : css``}\n`;\n\nexport const Timestamp = styled.div`\n  position: absolute;\n  bottom: 2px;\n  right: 7px;\n  color: gray;\n  font-size: 12px;\n`;","import React, { useEffect } from 'react';\nimport moment from 'moment';\nimport { Container, MessageItem, Contents, Timestamp } from './style'\n\n/**\n * isMine={message.from != chatId ? true : false} \n * \n * não vai funcionar para grupo.\n * Eu tenho que testar o \"id do login\", que por enquanto não tem, é tel do gmapi.\n */\nconst MessageList = ({ messageListData = [], chatId }) => {\n\n    useEffect(() => {\n        // Pin scroll to bottom\n        document.getElementById('message-list-container').scrollTop = document.getElementById('message-list-container').scrollHeight\n    })\n\n    return (\n        <Container id=\"message-list-container\">\n            {messageListData.map((message) => (\n                <MessageItem isMine={message.from !== chatId ? true : false} data-testid=\"message-item\" key={message.wid}>\n                    <Contents isError={message.isError ? true : false} data-testid=\"message-content\">{message.msg}</Contents>\n                    <Timestamp data-testid=\"message-date\">\n                        {moment.unix(message.timestamp).format('HH:mm')}\n                    </Timestamp>\n                </MessageItem>\n            ))}\n        </Container>\n    )\n}\n\nexport default MessageList","import styled from 'styled-components'\n\nexport const PaperPlane = styled.span`\n    background: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" width=\"24\" height=\"24\"><path fill=\"currentColor\" d=\"M1.101 21.757L23.8 12.028 1.101 2.3l.011 7.912 13.623 1.816-13.623 1.817-.011 7.912z\"></path></svg>');\n    width: 24px;\n    height: 24px;\n`","import React from 'react'\nimport { PaperPlane } from './SendIconStyle'\n\nconst SendIcon = () => {\n    return (\n        <React.Fragment>\n            <PaperPlane data-testid=\"send\" data-icon=\"send\"></PaperPlane>\n        </React.Fragment>\n    )\n}\n\nexport default SendIcon\n","import { Button } from '@material-ui/core'\nimport styled from 'styled-components'\n\nexport const Container = styled.div`\n  background-color: var(--rich-text-panel-background);\n  display: flex;\n  height: 50px;\n  border-left: 30px;\n  padding-top: 1.5vh;\n  padding-bottom: 1.5vh;\n  padding-left: 1.5vh;\n  padding-right: 1.5vh;\n  width: calc(100% - 3vh);\n`;\n\nexport const ActualInput = styled.input`\n  width: calc(100% - 50px);\n  border: none;\n  border-radius: 999px;\n  padding: 10px;\n  padding-left: 20px;\n  padding-right: 20px;\n  font-size: 15px;\n  outline: none;\n  box-shadow: 0 1px silver;\n  font-size: 18px;\n  line-height: 45px;\n`;\n\nexport const SendButton = styled(Button)`\n  min-width: 50px !important;\n  width: 50px !important;\n  border-radius: 999px !important;\n  background-color: var(--rich-text-panel-background) !important;\n  margin: 0 5px !important;\n  margin-right: 0 !important;\n  color: var(--icon) !important;\n  padding-left: 20px !important;\n  \n  svg {\n    margin-left: -3px;\n  }\n`;","import React, { useEffect } from 'react'\nimport SendIcon from './SendIcon'\nimport { Container, ActualInput, SendButton } from './style'\n\nconst MessageInput = ( { onMessage, chatId, inputState, setInputState } ) => {\n\n    useEffect(() => {\n        document.getElementById('message-input').focus()\n    }, [chatId])\n    \n    const sendInput = () => {\n        return inputState[chatId] ? onMessage({variables: {to: chatId, msg: inputState[chatId]}}) : false\n    }\n\n    const onKeyPress = (e) => {\n        if (e.charCode === 13) {\n          return sendInput()\n        }\n      };\n\n    const onChange = ({ target }) => {\n        setInputState({\n            ...inputState,\n            [chatId]: target.value\n        });\n    };\n\n    return (\n        <Container>\n            <ActualInput\n                data-testid=\"message-input\"\n                id=\"message-input\"\n                type=\"text\"\n                placeholder=\"Type a message\"\n                value={inputState[chatId] || ''}\n                onKeyPress={onKeyPress}\n                onChange={onChange}\n            />\n            <SendButton\n                data-testid=\"send-button\"\n                id=\"send-button\"\n                onClick={() => sendInput()}>\n                <SendIcon />\n            </SendButton>\n        </Container>\n    )\n}\n\nexport default MessageInput","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  background: url(/assets/chat-background.jpg);\n  display: flex;\n  flex-flow: column;\n  height: 100vh;\n`;","import { gql } from '@apollo/client'\n\nexport const SEND_TEXT_MESSAGE_MUTATION = gql`\n    mutation SendMessage($to: String!, $msg: String!) {\n        sendtextmessage(input: {\n            to: $to, \n            msg: $msg\n    }) {\n        wid\n        timestamp\n        to\n        from\n        msg\n        quote\n        forwarded\n    }\n}`\n","import React, { useState, useEffect } from 'react'\nimport {\n    Redirect\n} from 'react-router-dom'\nimport ChatRoomHeader from '../../components/ChatRoom/ChatRoomHeader';\nimport MessageList from './MessageList';\nimport MessageInput from './MessageInput';\nimport { Container } from './style'\n\nimport { useMutation } from '@apollo/client'\nimport { SEND_TEXT_MESSAGE_MUTATION } from '../../store/Apollo/ChatRoom'\n\nconst disableMessageInput = (bool) => {\n    document.getElementById(\"message-input\").disabled = bool\n    document.getElementById(\"send-button\").disabled = bool\n}\n\nconst handleError = (error, dispatch, chatId) => {\n    disableMessageInput(false)\n\n    try {\n        if (error.type === null) {\n            throw new Error(\"Retorno nulo de mutation.\")\n        }\n        if (error.networkError) {\n            throw new Error(\"Network Error: the entire query was rejected.\")\n        }\n        if (error.graphQLErrors) {\n            throw new Error(\"GrapgQL Error: failed resolvers on parse, validation or execution phase.\")\n        }\n        throw new Error(\"Unknow Error\")\n    } catch (throwedError) {\n        console.error(throwedError)\n        console.table(error)\n        // TODO: log error com mutation em database de erros\n    } finally {\n        dispatch((previousState) => {\n            return ( \n                {...previousState, \n                    chats: {\n                        ...previousState.chats,\n                        [chatId]:\n                            [\n                                ...previousState.chats[chatId],\n                                {\n                                    wid: `error-${Math.random()}`,\n                                    msg: \"Sua mensagem não pôde ser enviada.\",\n                                    isError: true,\n                                    timestamp: (Date.now() / 1000)\n                                }\n                            ]\n                        \n                    }}\n            )\n        })\n    }\n}\n\nconst ChatRoom = ({ chatRoomData = {id:\"\", info: {}, messages: []}, dispatch }) => {\n\n    const [ inputState, setInputState ] = useState({});\n\n    useEffect(() => {\n        if (!inputState.hasOwnProperty(chatRoomData.id)) setInputState((inputState) => {\n            return {\n                ...inputState,\n                [chatRoomData.id]: ''\n            }\n        })\n    }, [inputState, chatRoomData.id])\n\n    /**\n     * Esse { onError: () => {} } é hack para lidar com uma inconsistência no Apollo.\n     * O fato de retornar o \"error\" do ciclo da mutaćão deveria ser suficiente para tratar os erros, \n     * por uma inconsistência (ou por design) sem o onError por enquanto a página quebra e o aplicativo morre.\n     * Ver issue: https://github.com/apollographql/apollo-client/issues/6070\n     */\n    const [ sendMessageMutation, { loading, error, data: returnData } ] = useMutation(SEND_TEXT_MESSAGE_MUTATION, { onError: () => {} })\n\n    useEffect(() => {\n        if (loading) {\n            disableMessageInput(true)\n        }\n        if (error) {\n            return handleError(error, dispatch, chatRoomData.id)\n        }\n        if (returnData) {\n            if (returnData[0] === null) return handleError({type: null}, dispatch, chatRoomData.id)\n\n            // TODO: depois vai ter outros tipos de mensagem\n            let typeKey = Object.keys(returnData)[0]\n\n            disableMessageInput(false)\n            setInputState({\n                ...inputState,\n                [chatRoomData.id]: ''\n            })\n            document.getElementById('message-input').focus()\n\n            dispatch((previousState) => {\n                return ( \n                    {...previousState, \n                        chats: {\n                            ...previousState.chats,\n                            [chatRoomData.id]:\n                                [\n                                    ...previousState.chats[chatRoomData.id],\n                                    {\n                                        ...returnData[typeKey]\n                                    }\n                                ]\n                            \n                        }}\n                )\n            })\n        }\n    }, [loading, error, returnData])\n    \n    return (\n        <React.Fragment>\n            {\n                chatRoomData.id\n                ? \n                <Container data-testid=\"CallServiceContainer\">\n                    <ChatRoomHeader chatHeaderData={chatRoomData.info} />\n                    <MessageList messageListData={chatRoomData.messages} chatId={chatRoomData.id} />\n                    <MessageInput onMessage={sendMessageMutation} chatId={chatRoomData.id} inputState={inputState} setInputState={setInputState} />\n                </Container>\n                :\n                <Redirect to=\"/chats\" />\n            }\n        </React.Fragment>\n    )\n}\n\nexport default ChatRoom\n","import styled from 'styled-components'\n\nexport const Container = styled.div`\n  background-color: var(--intro-background);\n  display: flex;\n  flex-flow: column;\n  height: 100vh;\n`;\n\nexport const MainContainer = styled.div`\n  z-index:1;\n  box-sizing:border-box;\n  display:flex;\n  flex-direction: column;\n  flex-grow:1;\n  align-items:center;\n  justify-content:center;\n`\n\nexport const MainContainerIcon = styled.div`\n  background-image: url(\"/assets/intro-connection-light.jpg\");\n  background-repeat: no-repeat;\n  order: 1;\n  min-width:60vh;\n  height: 60vh;\n  margin: 0 auto;\n`\n\nexport const FirstText = styled.h1`\n  display:flex;\n  order: 2;\n  font-size: 32px;\n  font-weight: 300;\n  color: var(--primary-title);\n  text-align:center;\n`\n\nexport const SecondText = styled.div`\n  display:flex;\n  order: 3;\n  font-size: 14px;\n  line-height: 20px;\n  color: var(--intro-secondary);\n`","import React from 'react'\nimport { Container, MainContainer, MainContainerIcon, FirstText, SecondText } from './style'\n\nconst DashboardRoom = () => {\n\n    return (\n        <Container data-testid=\"DashboardContainer\">\n            <MainContainer>\n                <MainContainerIcon />\n                <FirstText>Keep your phone connected</FirstText>\n                <SecondText>WhatsApp connects to your phone to sync messages. To reduce data usage, connect your phone to Wi-Fi.</SecondText>\n            </MainContainer>\n        </Container>\n    )\n}\n\nexport default DashboardRoom","import styled from 'styled-components';\n\nexport const Row = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  width: 100%;\n`\n\nexport const Side = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-basis: 100%;\n  flex: 0.85\n`\n\nexport const Main = styled.div`\n  display: flex;\n  flex-direction: column;\n  flex-basis: 100%;\n  flex: 2\n`","import React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport ChatList from '../../components/ChatList'\nimport ChatRoom from '../../components/ChatRoom'\nimport DashboardRoom from '../../components/DashboardRoom'\nimport { Row, Side, Main } from './style'\n\n/**\n * TODO: useEffect com Promise.\n * Se retornar query valida no banco, renderiza os componentes.\n * Senao, useHistory().push(\"/chats\"), nao deve poder acessar numero invalido.\n */\nconst Dashboard = ({ state, dispatch }) => {\n  \n  const { chatId } = useParams()\n  \n  // Parse datazero\n  const contactList = Object.entries(state.contacts)\n  const messageList = Object.entries(state.chats)\n\n  let chatData = contactList.map((item, i) => Object.assign(\n    {}, \n    {id: item[0]}, \n    {info: item[1]}, \n    {messages: messageList[i][1]}\n  ))\n  \n  let chatDataById = chatData.find((chat) => chat.id === chatId)\n\n  return (\n    <Row>\n      <Side id=\"Side\" data-testid=\"Side\">\n          <ChatList chatListData={chatData} />\n      </Side>\n      <Main data-testid=\"Main\">\n          {\n            chatId\n            ? <ChatRoom chatRoomData={chatDataById} dispatch={dispatch} />\n            : <DashboardRoom />\n          }\n      </Main>\n    </Row>\n  )\n}\n\nexport default Dashboard","const datazero = {\n    prop1: 'Propriedade Um',\n    contacts: {\n      554498455712: {\n        name: 'Jackson',\n        status: 'Understand however that every man is worth just so much as the things are worth about which he busies himself.',\n        avatar: 'https://373819-1169963-raikfcquaxqncofqfm.stackpathdns.com/wp-content/uploads/2016/07/epictetus.jpg',\n      },\n      556599375661: {\n        name: 'Itacir Gabral',\n        status: '🤔',\n        avatar: 'https://images-na.ssl-images-amazon.com/images/I/81eUW9G6mML.jpg',\n      },\n    },\n    chats: {\n      554498455712: [\n        {\n          type: 'textMessage',\n          timestamp: '1613415699',\n          to: '554498455712',\n          from: '556596910295',\n          msg: 'Qual a boa?',\n          wid: 'EAF75BB00E5CB33C405B80DAC79D015D',\n        },\n        {\n          type: 'textMessage',\n          timestamp: '1613415699',\n          to: '556596910295',\n          from: '554498455712',\n          msg: 'Paçoca',\n          wid: 'EAF75BB00E5CB33C405B80DAC79D015E',\n        },\n      ],\n      556599375661: [\n        {\n          type: 'textMessage',\n          timestamp: '1613415688',\n          to: '556596910295',\n          from: '556599375661',\n          msg: 'opa e ai ze',\n          wid: 'EAF75BB00E5CB33C405B80DAC79D015B',\n        },\n        {\n          type: 'textMessage',\n          timestamp: '1613415699',\n          to: '556599375661',\n          from: '556596910295',\n          msg: 'tudo',\n          wid: 'EAF75BB00E5CB33C405B80DAC79D015C',\n        },\n      ],\n    },\n  };\n  \n  export default datazero;\n  ","import React, { useState } from 'react'\nimport './App.css';\n// Router\nimport {\n  BrowserRouter,\n  Redirect,\n  Route,\n  Switch\n} from 'react-router-dom';\n// Apollo\nimport { ApolloProvider } from '@apollo/client'\nimport { client } from './store/Apollo'\n// Page\nimport Dashboard from './pages/Dashboard'\n\n// Temp\nimport datazero from './store/datazero'\n\nconst App = () => {\n  const [state, dispatch] = useState(datazero)\n  \n  const redirectToDashboard = () => <Redirect to=\"/chats\" />\n  \n  return (\n    <ApolloProvider client={client}>\n      <BrowserRouter>\n        <Switch>\n          <Route path=\"/chats/:chatId?\">\n            <Dashboard state={state} dispatch={dispatch} />\n          </Route>\n          <Route exact path=\"/\" render={redirectToDashboard} />\n        </Switch>\n      </BrowserRouter>\n    </ApolloProvider>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}